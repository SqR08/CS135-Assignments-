;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |trie 2.0|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;;2a)

(define a-tnode (make-tnode #\a false (list (make-tnode #\t true empty))))

(define c-tnode
  (make-tnode #\c false
              (list
               (make-tnode #\o false (list (make-tnode #\o true empty)
                                           (make-tnode #\w true empty)))
               (make-tnode #\s false
                                     (list (make-tnode #\1 false
                                             (list
                                               (make-tnode #\1 false
                                                     (list (make-tnode #\5 true empty)
                                                           (make-tnode #\6 true empty)))           
                                               (make-tnode #\3 false
                                                     (list (make-tnode #\5 true empty)
                                                           (make-tnode #\6 true empty)))))))
               )))


(define a-c-trie (make-trie (list a-tnode c-tnode)))                                

;;2b)

;;trie-template: Trie -> Any
;;(define (trie-template mytrie)
;; (... list-tnode-template (trie-children mytrie)...)


;;list-tnode-template: (listof TNodes) -> Any
;;(define (list-tnode-template mylist)
;;  (cond [(empty? mylist)...]
;;        [else (tnode-template (first mylist))...
;;              (list-tnode-template (rest mylist))...]
;;        ))

;;tnode-template: TNode -> Any
;;(define (tnode-template mytnode)
;;  (... (tnode-key mytnode)...
;;       (tnode-ends-word? mytnode)...
;;       (list-tnode-template (tnode-children mytnode))...))

;;2c)
;;(in-trie? myword mytrie)

(define (in-trie? myword mytrie)
  (in-trie?/main (string->list myword) mytrie))

;;(listof Char) Trie -> Bool
(define (in-trie?/main myword mytrie)
  (cond [(empty? (trie-children mytrie)) false]
        [(empty? myword) false]
        [(and (empty? (rest myword)) (char=? (first myword) (tnode-key (first (trie-children mytrie)))))]
        [(char=? (first myword) (tnode-key (first (trie-children mytrie))))
         (in-trie?/main (rest myword) (make-trie (tnode-children (first (trie-children mytrie)))))]
        [else (in-trie?/main myword (make-trie (rest (trie-children mytrie))))]))

;;2d)
;;consumes a trie and produces a list of all the words in the trie

(define (list-words mytrie)
  (list-words2 (trie-children mytrie) empty))

;;(list-words2 listofnodes worldlistacc) produces a list of words
;;(worldlistacc) that is in a list of nodes
;:list-words2: (listof TNodes) (listof Str) -> (listof Str)
(define (list-words2 listofnodes wordlistacc)
  (cond [(empty? listofnodes) wordlistacc]
        [else (worldlistacc (rest listofnodes)
                            (append (list-words3 (first listofnodes))
                                     worldlistacc))]

;;(char/acc mynode characc) produces a list of words 
;;in mynode
;:characc: Tnode (listof Str) -> (listof Str)
;;(define (list-words3 node worldlistacc)        
;;  (cond [(empty? (tnode-children node)) wordlistacc]
;;        [(false? (tnode-ends-word? node)) (append (char/acc node 

          
  
  
  